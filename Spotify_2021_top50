-- Data downloaded from Kaggle.com. This is the SQL used to create table and exploration of that data

-- Creating table in SQLite Studio

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

-- Verify data in table by most popular

SELECT *
FROM BIT_DB.Spotifydata
ORDER BY populartity desc

-- What are the top 10 songs in the playlist

SELECT artist_name, track_name, popularity
FROM Spotifydata
ORDER BY popularity desc
LIMIT 10;


-- Which artist have more than one song on the list and how many?

SELECT distinct artist_name, count(*) AS song_cnt
FROM Spotifydata
Group BY artist_name
HAVING count(*) >1
ORDER BY song_cnt desc;

--What are the top ten songs with the highest energy level

SELECT artist_name, track_name, energy
FROM Spotifydata
ORDER BY energy desc
LIMIT 10;

-- Use CTE to calculate the average pop for the artist. Then, for artist pop => 90 show their name, avg and label them as 'Top Star'

WITH popularity_average_CTE AS (
SELECT s.artist_name,
AVG(s.popularity) AS average_popularity
FROM SpotifyData s 
GROUP BY s.artist_name
)
 
SELECT  artist_name, average_popularity, 'Top Star' AS tag
FROM popularity_average_CTE
WHERE average_popularity>=90;

-- Total Tracks and their percentage of total tracks

WITH CTE AS (SELECT tracks.GenreId AS GenreId, genres.Name AS Genre, count(tracks.name) AS total_tracks
FROM tracks
JOIN genres
ON tracks.GenreId = genres.GenreId
Group BY tracks.GenreId
ORDER BY total_tracks DESC
)

SELECT GenreId, Genre, total_tracks, (total_tracks * 100 / SUM(total_tracks) OVER()) AS Percentage
FROM CTE;
